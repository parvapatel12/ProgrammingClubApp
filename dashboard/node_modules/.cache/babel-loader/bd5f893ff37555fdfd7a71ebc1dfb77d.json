{"ast":null,"code":"import _regeneratorRuntime from \"/home/shagun/ProgrammingClubApp/dashboard/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shagun/ProgrammingClubApp/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/shagun/ProgrammingClubApp/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shagun/ProgrammingClubApp/dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shagun/ProgrammingClubApp/dashboard/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shagun/ProgrammingClubApp/dashboard/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shagun/ProgrammingClubApp/dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/shagun/ProgrammingClubApp/dashboard/src/components/Comment.js\";\nimport React, { Component } from \"react\";\nimport \"./Blog.css\"; //import htmlToDraft from 'html-to-draftjs';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport firebase from \"firebase\";\nimport draftToHtml from 'draftjs-to-html'; //import Addreply from \"./Addreply\";\n\nimport Reply from \"./Reply\"; //import {WebView} from 'react-native';\n\nvar Comment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Comment, _Component);\n\n  function Comment(props) {\n    var _this;\n\n    _classCallCheck(this, Comment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Comment).call(this, props));\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.state = {\n      content: \" \",\n      curr_user: 'parvapatel12',\n      curr_id: 1,\n      editorState: EditorState.createEmpty(),\n      commentobj: 0,\n      viewreply: 0\n    }; // console.log(\"hello\");\n\n    var currid = 0;\n\n    _this.getobj();\n\n    return _this;\n  }\n\n  _createClass(Comment, [{\n    key: \"handleSendReply\",\n    value: function () {\n      var _handleSendReply = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var currid, ref, newItem, commentarray, tempid, curr_key, deep, reply_obj, query;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currid = 0;\n                ref = firebase.database().ref().child('replyid');\n                ref.on(\"value\", function (snapshot) {\n                  currid = snapshot.val();\n                }, function (error) {\n                  console.log(\"Error: \" + error.code);\n                }); //  console.log(this.state.blogid);\n\n                if (!1) {\n                  _context.next = 20;\n                  break;\n                }\n\n                newItem = {\n                  // id:currid,\n                  userName: this.state.curr_user,\n                  content: draftToHtml(convertToRaw(this.state.editorState.getCurrentContent())) // timestamp: firebase.database.ServerValue.TIMESTAMP, \n\n                }; //   ref.transaction(function(currid) {\n                //     return currid+1;\n                //  });\n                //firebase.database().ref().update({blogid :currid});\n\n                commentarray = this.state.commentobj.replylist; // console.log(typeof commentarray);\n\n                if (typeof commentarray === 'undefined') {\n                  commentarray = new Array(1).fill(newItem);\n                } else commentarray.push(newItem);\n\n                tempid = this.state.commentobj.id; //console.log(typeof commentarray);\n\n                deep = this.state.commentobj;\n                deep.replylist = commentarray;\n                this.setState({\n                  commentobj: deep\n                });\n                reply_obj = this.state.commentobj;\n                query = firebase.database().ref(\"comment_list\").orderByKey();\n                _context.next = 15;\n                return query.once(\"value\").then(function (snapshot) {\n                  snapshot.forEach(function (childSnapshot) {\n                    var childData = childSnapshot.val();\n\n                    if (childData.id == tempid) {\n                      curr_key = childSnapshot.key;\n                      firebase.database().ref(\"comment_list\").child(curr_key).set({\n                        id: reply_obj.id,\n                        userName: reply_obj.userName,\n                        content: reply_obj.content,\n                        replylist: reply_obj.replylist,\n                        timestamp: reply_obj.timestamp\n                      });\n                    } // id:currid,\n                    // userName: this.state.userName,\n                    // content: draftToHtml(convertToRaw(this.state.editorState.getCurrentContent())),\n                    // replylist: this.state.replylist,\n                    // timestamp: firebase.database.ServerValue.TIMESTAMP   \n\n                  });\n                });\n\n              case 15:\n                //firebase.database().ref().child(\"blog_entry\").child(this.props.message.key);\n                // this.setState({ title: '' });\n                this.setState({\n                  content: ''\n                });\n                this.setState({\n                  editorState: EditorState.createEmpty()\n                });\n                deep = this.state.commentobj;\n                deep.replylist = commentarray;\n                this.setState({\n                  commentobj: deep\n                });\n\n              case 20:\n                this.setState({\n                  viewreply: false\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleSendReply() {\n        return _handleSendReply.apply(this, arguments);\n      }\n\n      return handleSendReply;\n    }()\n  }, {\n    key: \"getobj\",\n    value: function () {\n      var _getobj = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var tempid, temp_obj, curr_key, query;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                tempid = this.props.message;\n                query = firebase.database().ref(\"comment_list\").orderByKey();\n                _context2.next = 4;\n                return query.once(\"value\").then(function (snapshot) {\n                  snapshot.forEach(function (childSnapshot) {\n                    var childData = childSnapshot.val();\n                    console.log(tempid);\n\n                    if (childData.id == tempid) {\n                      curr_key = childSnapshot.key;\n                      temp_obj = childData;\n                    }\n                  });\n                });\n\n              case 4:\n                this.setState({\n                  commentobj: temp_obj\n                }); //console.log(this.commentobj);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getobj() {\n        return _getobj.apply(this, arguments);\n      }\n\n      return getobj;\n    }()\n  }, {\n    key: \"handleAddreply\",\n    value: function handleAddreply(event) {\n      this.setState({\n        viewreply: true\n      });\n    } // closeEditor(event)\n    // {\n    //   this.setState({})\n    // }\n\n  }, {\n    key: \"handleChange_content\",\n    value: function handleChange_content(event) {\n      this.setState({\n        content: event.target.value\n      });\n    }\n  }, {\n    key: \"handleKeyPress\",\n    value: function handleKeyPress(event) {\n      if (event.key !== \"Enter\") return;\n      this.handleSend();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var editorState = this.state.editorState;\n      return this.state.commentobj ? React.createElement(\"div\", {\n        className: \"comment-main-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"comment-particular\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"comment-username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"[\", this.state.commentobj.userName, \"]\"), React.createElement(\"div\", {\n        className: \"comment-content\",\n        dangerouslySetInnerHTML: {\n          __html: this.state.commentobj.content\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"reply-particular\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, this.state.commentobj.replylist ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.state.commentobj.replylist.map(function (element) {\n        return React.createElement(Reply, {\n          message: element,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        });\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"No replies yet\")), React.createElement(\"div\", {\n        className: \"for-reply\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reply-btn\",\n        onClick: this.handleAddreply.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"(Reply to this comment)\"))), this.state.viewreply ? React.createElement(\"div\", {\n        className: \"add-comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        className: \"rich_text_own\",\n        editorState: editorState,\n        wrapperClassName: \"demo-wrapper\",\n        editorClassName: \"demo-editor\",\n        onEditorStateChange: this.onEditorStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"submit-comment-btn\",\n        onClick: this.handleSendReply.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \" Submit Reply\"), React.createElement(\"div\", {\n        className: \"for-space\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Comment;\n}(Component);\n\nexport default Comment;","map":{"version":3,"sources":["/home/shagun/ProgrammingClubApp/dashboard/src/components/Comment.js"],"names":["React","Component","Editor","EditorState","convertToRaw","firebase","draftToHtml","Reply","Comment","props","onEditorStateChange","editorState","setState","state","content","curr_user","curr_id","createEmpty","commentobj","viewreply","currid","getobj","ref","database","child","on","snapshot","val","error","console","log","code","newItem","userName","getCurrentContent","commentarray","replylist","Array","fill","push","tempid","id","deep","reply_obj","query","orderByKey","once","then","forEach","childSnapshot","childData","curr_key","key","set","timestamp","message","temp_obj","event","target","value","handleSend","__html","map","element","handleAddreply","bind","handleSendReply"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Blog.css\";\n//import htmlToDraft from 'html-to-draftjs';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport firebase from \"firebase\";\nimport draftToHtml from 'draftjs-to-html';\n//import Addreply from \"./Addreply\";\nimport Reply from \"./Reply\";\n\n//import {WebView} from 'react-native';\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: \" \",\n      curr_user: 'parvapatel12',\n      curr_id: 1,\n      editorState: EditorState.createEmpty(),\n      commentobj: 0,\n      viewreply: 0,\n    };\n\n    // console.log(\"hello\");\n\n    var currid = 0;\n\n\n\n    this.getobj();\n\n  }\n  onEditorStateChange = (editorState) => {\n    this.setState({\n      editorState,\n    });\n  };\n\n  async handleSendReply() {\n\n    var currid = 0;\n    var ref = firebase.database().ref().child('replyid');\n    ref.on(\"value\", function (snapshot) {\n      currid = snapshot.val();\n    }, function (error) {\n      console.log(\"Error: \" + error.code);\n    });\n\n    //  console.log(this.state.blogid);\n    if (1) {\n      var newItem = {\n        // id:currid,\n        userName: this.state.curr_user,\n        content: draftToHtml(convertToRaw(this.state.editorState.getCurrentContent())),\n        // timestamp: firebase.database.ServerValue.TIMESTAMP, \n      };\n\n      //   ref.transaction(function(currid) {\n      //     return currid+1;\n      //  });\n\n      //firebase.database().ref().update({blogid :currid});\n\n\n\n\n      var commentarray = (this.state.commentobj.replylist);\n      // console.log(typeof commentarray);\n      if (typeof commentarray === 'undefined') {\n        commentarray = new Array(1).fill(newItem);\n      }\n      else\n        commentarray.push(newItem);\n\n      var tempid = this.state.commentobj.id;\n      //console.log(typeof commentarray);\n      var curr_key;\n\n      var deep = this.state.commentobj;\n      deep.replylist = commentarray;\n\n      this.setState({ commentobj: deep });\n\n      var reply_obj = this.state.commentobj;\n\n      var query = firebase.database().ref(\"comment_list\").orderByKey();\n\n      await query.once(\"value\")\n        .then(function (snapshot) {\n          snapshot.forEach(function (childSnapshot) {\n\n            var childData = childSnapshot.val();\n\n            if (childData.id == tempid) {\n              curr_key = childSnapshot.key;\n\n              firebase.database().ref(\"comment_list\").child(curr_key).set(\n                {\n                  id: reply_obj.id,\n                  userName: reply_obj.userName,\n                  content: reply_obj.content,\n                  replylist: reply_obj.replylist,\n                  timestamp: reply_obj.timestamp\n                });\n            }\n\n            // id:currid,\n            // userName: this.state.userName,\n            // content: draftToHtml(convertToRaw(this.state.editorState.getCurrentContent())),\n            // replylist: this.state.replylist,\n            // timestamp: firebase.database.ServerValue.TIMESTAMP   \n          });\n        });\n\n      //firebase.database().ref().child(\"blog_entry\").child(this.props.message.key);\n      // this.setState({ title: '' });\n      this.setState({ content: '' });\n      this.setState({ editorState: EditorState.createEmpty() });\n      var deep = this.state.commentobj;\n      deep.replylist = commentarray;\n\n      this.setState({ commentobj: deep });\n    }\n\n    this.setState({ viewreply: false });\n  }\n\n\n\n  async getobj() {\n    var tempid = this.props.message;\n    var temp_obj;\n    var curr_key;\n\n\n    var query = firebase.database().ref(\"comment_list\").orderByKey();\n\n    await query.once(\"value\")\n      .then(function (snapshot) {\n        snapshot.forEach(function (childSnapshot) {\n\n          var childData = childSnapshot.val();\n          console.log(tempid);\n          if (childData.id == tempid) {\n            curr_key = childSnapshot.key;\n            temp_obj = childData;\n          }\n        });\n      });\n\n\n\n    this.setState({ commentobj: temp_obj });\n    //console.log(this.commentobj);\n  }\n\n  handleAddreply(event) {\n    this.setState({ viewreply: true });\n  }\n\n  // closeEditor(event)\n  // {\n  //   this.setState({})\n  // }\n\n\n  handleChange_content(event) {\n    this.setState({ content: event.target.value });\n  }\n  handleKeyPress(event) {\n    if (event.key !== \"Enter\") return;\n    this.handleSend();\n  }\n  render() {\n    const { editorState } = this.state;\n    return (\n\n      (this.state.commentobj) ?\n        (\n          <div className=\"comment-main-2\">\n\n            <div className=\"comment-particular\">\n              <div className=\"comment-username\">[{this.state.commentobj.userName}]</div>\n              <div className=\"comment-content\" dangerouslySetInnerHTML={{ __html: this.state.commentobj.content }} />\n\n              <div className=\"reply-particular\">\n                {this.state.commentobj.replylist ? (\n                  <div >\n                    {this.state.commentobj.replylist.map(element =>\n                      <Reply message={element} />)\n                    }\n                  </div>\n                ) : (\n                    <div>No replies yet</div>\n                  )\n                }\n              </div>\n              <div className=\"for-reply\">\n                <div className=\"reply-btn\" onClick={this.handleAddreply.bind(this)}>(Reply to this comment)</div>\n              </div>\n\n            </div>\n            {/*     <div className=\"partition-line-4\"></div>      */}\n\n            {this.state.viewreply ? (\n              <div className=\"add-comment\">\n                <Editor\n                  className=\"rich_text_own\"\n                  editorState={editorState}\n                  wrapperClassName=\"demo-wrapper\"\n                  editorClassName=\"demo-editor\"\n                  onEditorStateChange={this.onEditorStateChange}\n                />\n                {/* <div>{this.state.taglist}</div> */}\n                \n                {/* <button onClick={this.closeEditor}>Close Editor</button> */}\n\n                <div\n                  className=\"submit-comment-btn\"\n                  onClick={this.handleSendReply.bind(this)}\n                > Submit Reply</div>\n                <div className=\"for-space\"></div>\n              </div>\n\n            ) : (\n                <div></div>\n              )}\n\n            {/* {this.state.commentobj.replylist ? (\n              <div >\n                {this.state.commentobj.replylist.map(element =>\n                  <Reply message={element} />)\n                }\n              </div>\n            ) : (\n                <div>No replies</div>\n              )\n            }\n          */}\n          </div>\n        ) : (<div></div>)\n\n\n    );\n  }\n\n}\nexport default Comment;"]},"metadata":{},"sourceType":"module"}